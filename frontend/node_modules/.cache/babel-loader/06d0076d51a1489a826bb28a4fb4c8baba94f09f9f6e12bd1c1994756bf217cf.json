{"ast":null,"code":"import _classPrivateMethodInitSpec from \"C:/Users/joinu/Documents/GitHub/Outfit-Generator-Frontend/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/joinu/Documents/GitHub/Outfit-Generator-Frontend/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"C:/Users/joinu/Documents/GitHub/Outfit-Generator-Frontend/frontend/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"C:/Users/joinu/Documents/GitHub/Outfit-Generator-Frontend/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/joinu/Documents/GitHub/Outfit-Generator-Frontend/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _client, _currentQuery, _currentQueryInitialState, _currentResult, _currentResultState, _currentResultOptions, _selectError, _selectFn, _selectResult, _lastQueryWithDefinedData, _staleTimeoutId, _refetchIntervalId, _currentRefetchInterval, _trackedProps, _Class_brand;\n// src/queryObserver.ts\nimport { isServer, isValidTimeout, noop, replaceData, shallowEqualObjects, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { fetchState } from \"./query.js\";\nvar QueryObserver = (_client = /*#__PURE__*/new WeakMap(), _currentQuery = /*#__PURE__*/new WeakMap(), _currentQueryInitialState = /*#__PURE__*/new WeakMap(), _currentResult = /*#__PURE__*/new WeakMap(), _currentResultState = /*#__PURE__*/new WeakMap(), _currentResultOptions = /*#__PURE__*/new WeakMap(), _selectError = /*#__PURE__*/new WeakMap(), _selectFn = /*#__PURE__*/new WeakMap(), _selectResult = /*#__PURE__*/new WeakMap(), _lastQueryWithDefinedData = /*#__PURE__*/new WeakMap(), _staleTimeoutId = /*#__PURE__*/new WeakMap(), _refetchIntervalId = /*#__PURE__*/new WeakMap(), _currentRefetchInterval = /*#__PURE__*/new WeakMap(), _trackedProps = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), class QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    _classPrivateMethodInitSpec(this, _Class_brand);\n    _classPrivateFieldInitSpec(this, _client, void 0);\n    _classPrivateFieldInitSpec(this, _currentQuery, void 0);\n    _classPrivateFieldInitSpec(this, _currentQueryInitialState, void 0);\n    _classPrivateFieldInitSpec(this, _currentResult, void 0);\n    _classPrivateFieldInitSpec(this, _currentResultState, void 0);\n    _classPrivateFieldInitSpec(this, _currentResultOptions, void 0);\n    _classPrivateFieldInitSpec(this, _selectError, void 0);\n    _classPrivateFieldInitSpec(this, _selectFn, void 0);\n    _classPrivateFieldInitSpec(this, _selectResult, void 0);\n    // This property keeps track of the last query with defined data.\n    // It will be used to pass the previous data and query to the placeholder function between renders.\n    _classPrivateFieldInitSpec(this, _lastQueryWithDefinedData, void 0);\n    _classPrivateFieldInitSpec(this, _staleTimeoutId, void 0);\n    _classPrivateFieldInitSpec(this, _refetchIntervalId, void 0);\n    _classPrivateFieldInitSpec(this, _currentRefetchInterval, void 0);\n    _classPrivateFieldInitSpec(this, _trackedProps, /* @__PURE__ */new Set());\n    this.options = options;\n    _classPrivateFieldSet(_client, this, client);\n    _classPrivateFieldSet(_selectError, this, null);\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  bindMethods() {\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      _classPrivateFieldGet(_currentQuery, this).addObserver(this);\n      if (shouldFetchOnMount(_classPrivateFieldGet(_currentQuery, this), this.options)) {\n        _assertClassBrand(_Class_brand, this, _executeFetch).call(this);\n      } else {\n        this.updateResult();\n      }\n      _assertClassBrand(_Class_brand, this, _updateTimers).call(this);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(_classPrivateFieldGet(_currentQuery, this), this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(_classPrivateFieldGet(_currentQuery, this), this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    _assertClassBrand(_Class_brand, this, _clearStaleTimeout).call(this);\n    _assertClassBrand(_Class_brand, this, _clearRefetchInterval).call(this);\n    _classPrivateFieldGet(_currentQuery, this).removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = _classPrivateFieldGet(_currentQuery, this);\n    this.options = _classPrivateFieldGet(_client, this).defaultQueryOptions(options);\n    if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\") {\n      throw new Error(\"Expected enabled to be a boolean\");\n    }\n    _assertClassBrand(_Class_brand, this, _updateQuery).call(this);\n    _classPrivateFieldGet(_currentQuery, this).setOptions(this.options);\n    if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n      _classPrivateFieldGet(_client, this).getQueryCache().notify({\n        type: \"observerOptionsUpdated\",\n        query: _classPrivateFieldGet(_currentQuery, this),\n        observer: this\n      });\n    }\n    const mounted = this.hasListeners();\n    if (mounted && shouldFetchOptionally(_classPrivateFieldGet(_currentQuery, this), prevQuery, this.options, prevOptions)) {\n      _assertClassBrand(_Class_brand, this, _executeFetch).call(this);\n    }\n    this.updateResult(notifyOptions);\n    if (mounted && (_classPrivateFieldGet(_currentQuery, this) !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      _assertClassBrand(_Class_brand, this, _updateStaleTimeout).call(this);\n    }\n    const nextRefetchInterval = _assertClassBrand(_Class_brand, this, _computeRefetchInterval).call(this);\n    if (mounted && (_classPrivateFieldGet(_currentQuery, this) !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== _classPrivateFieldGet(_currentRefetchInterval, this))) {\n      _assertClassBrand(_Class_brand, this, _updateRefetchInterval).call(this, nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = _classPrivateFieldGet(_client, this).getQueryCache().build(_classPrivateFieldGet(_client, this), options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      _classPrivateFieldSet(_currentResult, this, result);\n      _classPrivateFieldSet(_currentResultOptions, this, this.options);\n      _classPrivateFieldSet(_currentResultState, this, _classPrivateFieldGet(_currentQuery, this).state);\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return _classPrivateFieldGet(_currentResult, this);\n  }\n  trackResult(result, onPropTracked) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key);\n          onPropTracked === null || onPropTracked === void 0 || onPropTracked(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  trackProp(key) {\n    _classPrivateFieldGet(_trackedProps, this).add(key);\n  }\n  getCurrentQuery() {\n    return _classPrivateFieldGet(_currentQuery, this);\n  }\n  refetch() {\n    let {\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.fetch({\n      ...options\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = _classPrivateFieldGet(_client, this).defaultQueryOptions(options);\n    const query = _classPrivateFieldGet(_client, this).getQueryCache().build(_classPrivateFieldGet(_client, this), defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n    return _assertClassBrand(_Class_brand, this, _executeFetch).call(this, {\n      ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) !== null && _fetchOptions$cancelR !== void 0 ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return _classPrivateFieldGet(_currentResult, this);\n    });\n  }\n  createResult(query, options) {\n    const prevQuery = _classPrivateFieldGet(_currentQuery, this);\n    const prevOptions = this.options;\n    const prevResult = _classPrivateFieldGet(_currentResult, this);\n    const prevResultState = _classPrivateFieldGet(_currentResultState, this);\n    const prevResultOptions = _classPrivateFieldGet(_currentResultOptions, this);\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : _classPrivateFieldGet(_currentQueryInitialState, this);\n    const {\n      state\n    } = query;\n    let newState = {\n      ...state\n    };\n    let isPlaceholderData = false;\n    let data;\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options)\n        };\n      }\n      if (options._optimisticResults === \"isRestoring\") {\n        newState.fetchStatus = \"idle\";\n      }\n    }\n    let {\n      error,\n      errorUpdatedAt,\n      status\n    } = newState;\n    if (options.select && newState.data !== void 0) {\n      if (prevResult && newState.data === (prevResultState === null || prevResultState === void 0 ? void 0 : prevResultState.data) && options.select === _classPrivateFieldGet(_selectFn, this)) {\n        data = _classPrivateFieldGet(_selectResult, this);\n      } else {\n        try {\n          _classPrivateFieldSet(_selectFn, this, options.select);\n          data = options.select(newState.data);\n          data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, data, options);\n          _classPrivateFieldSet(_selectResult, this, data);\n          _classPrivateFieldSet(_selectError, this, null);\n        } catch (selectError) {\n          _classPrivateFieldSet(_selectError, this, selectError);\n        }\n      }\n    } else {\n      data = newState.data;\n    }\n    if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n      let placeholderData;\n      if (prevResult !== null && prevResult !== void 0 && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions === null || prevResultOptions === void 0 ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        var _classPrivateFieldGet2;\n        placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData((_classPrivateFieldGet2 = _classPrivateFieldGet(_lastQueryWithDefinedData, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.state.data, _classPrivateFieldGet(_lastQueryWithDefinedData, this)) : options.placeholderData;\n        if (options.select && placeholderData !== void 0) {\n          try {\n            placeholderData = options.select(placeholderData);\n            _classPrivateFieldSet(_selectError, this, null);\n          } catch (selectError) {\n            _classPrivateFieldSet(_selectError, this, selectError);\n          }\n        }\n      }\n      if (placeholderData !== void 0) {\n        status = \"success\";\n        data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n    if (_classPrivateFieldGet(_selectError, this)) {\n      error = _classPrivateFieldGet(_selectError, this);\n      data = _classPrivateFieldGet(_selectResult, this);\n      errorUpdatedAt = Date.now();\n      status = \"error\";\n    }\n    const isFetching = newState.fetchStatus === \"fetching\";\n    const isPending = status === \"pending\";\n    const isError = status === \"error\";\n    const isLoading = isPending && isFetching;\n    const hasData = data !== void 0;\n    const result = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === \"success\",\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === \"paused\",\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = _classPrivateFieldGet(_currentResult, this);\n    const nextResult = this.createResult(_classPrivateFieldGet(_currentQuery, this), this.options);\n    _classPrivateFieldSet(_currentResultState, this, _classPrivateFieldGet(_currentQuery, this).state);\n    _classPrivateFieldSet(_currentResultOptions, this, this.options);\n    if (_classPrivateFieldGet(_currentResultState, this).data !== void 0) {\n      _classPrivateFieldSet(_lastQueryWithDefinedData, this, _classPrivateFieldGet(_currentQuery, this));\n    }\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    _classPrivateFieldSet(_currentResult, this, nextResult);\n    const defaultNotifyOptions = {};\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !_classPrivateFieldGet(_trackedProps, this).size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangePropsValue !== null && notifyOnChangePropsValue !== void 0 ? notifyOnChangePropsValue : _classPrivateFieldGet(_trackedProps, this));\n      if (this.options.throwOnError) {\n        includedProps.add(\"error\");\n      }\n      return Object.keys(_classPrivateFieldGet(_currentResult, this)).some(key => {\n        const typedKey = key;\n        const changed = _classPrivateFieldGet(_currentResult, this)[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if ((notifyOptions === null || notifyOptions === void 0 ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    _assertClassBrand(_Class_brand, this, _notify).call(this, {\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  onQueryUpdate() {\n    this.updateResult();\n    if (this.hasListeners()) {\n      _assertClassBrand(_Class_brand, this, _updateTimers).call(this);\n    }\n  }\n});\nfunction _executeFetch(fetchOptions) {\n  _assertClassBrand(_Class_brand, this, _updateQuery).call(this);\n  let promise = _classPrivateFieldGet(_currentQuery, this).fetch(this.options, fetchOptions);\n  if (!(fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.throwOnError)) {\n    promise = promise.catch(noop);\n  }\n  return promise;\n}\nfunction _updateStaleTimeout() {\n  _assertClassBrand(_Class_brand, this, _clearStaleTimeout).call(this);\n  if (isServer || _classPrivateFieldGet(_currentResult, this).isStale || !isValidTimeout(this.options.staleTime)) {\n    return;\n  }\n  const time = timeUntilStale(_classPrivateFieldGet(_currentResult, this).dataUpdatedAt, this.options.staleTime);\n  const timeout = time + 1;\n  _classPrivateFieldSet(_staleTimeoutId, this, setTimeout(() => {\n    if (!_classPrivateFieldGet(_currentResult, this).isStale) {\n      this.updateResult();\n    }\n  }, timeout));\n}\nfunction _computeRefetchInterval() {\n  var _ref;\n  return (_ref = typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(_classPrivateFieldGet(_currentQuery, this)) : this.options.refetchInterval) !== null && _ref !== void 0 ? _ref : false;\n}\nfunction _updateRefetchInterval(nextInterval) {\n  _assertClassBrand(_Class_brand, this, _clearRefetchInterval).call(this);\n  _classPrivateFieldSet(_currentRefetchInterval, this, nextInterval);\n  if (isServer || this.options.enabled === false || !isValidTimeout(_classPrivateFieldGet(_currentRefetchInterval, this)) || _classPrivateFieldGet(_currentRefetchInterval, this) === 0) {\n    return;\n  }\n  _classPrivateFieldSet(_refetchIntervalId, this, setInterval(() => {\n    if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n      _assertClassBrand(_Class_brand, this, _executeFetch).call(this);\n    }\n  }, _classPrivateFieldGet(_currentRefetchInterval, this)));\n}\nfunction _updateTimers() {\n  _assertClassBrand(_Class_brand, this, _updateStaleTimeout).call(this);\n  _assertClassBrand(_Class_brand, this, _updateRefetchInterval).call(this, _assertClassBrand(_Class_brand, this, _computeRefetchInterval).call(this));\n}\nfunction _clearStaleTimeout() {\n  if (_classPrivateFieldGet(_staleTimeoutId, this)) {\n    clearTimeout(_classPrivateFieldGet(_staleTimeoutId, this));\n    _classPrivateFieldSet(_staleTimeoutId, this, void 0);\n  }\n}\nfunction _clearRefetchInterval() {\n  if (_classPrivateFieldGet(_refetchIntervalId, this)) {\n    clearInterval(_classPrivateFieldGet(_refetchIntervalId, this));\n    _classPrivateFieldSet(_refetchIntervalId, this, void 0);\n  }\n}\nfunction _updateQuery() {\n  const query = _classPrivateFieldGet(_client, this).getQueryCache().build(_classPrivateFieldGet(_client, this), this.options);\n  if (query === _classPrivateFieldGet(_currentQuery, this)) {\n    return;\n  }\n  const prevQuery = _classPrivateFieldGet(_currentQuery, this);\n  _classPrivateFieldSet(_currentQuery, this, query);\n  _classPrivateFieldSet(_currentQueryInitialState, this, query.state);\n  if (this.hasListeners()) {\n    prevQuery === null || prevQuery === void 0 || prevQuery.removeObserver(this);\n    query.addObserver(this);\n  }\n}\nfunction _notify(notifyOptions) {\n  notifyManager.batch(() => {\n    if (notifyOptions.listeners) {\n      this.listeners.forEach(listener => {\n        listener(_classPrivateFieldGet(_currentResult, this));\n      });\n    }\n    _classPrivateFieldGet(_client, this).getQueryCache().notify({\n      query: _classPrivateFieldGet(_currentQuery, this),\n      type: \"observerResultsUpdated\"\n    });\n  });\n}\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return options.enabled !== false && query.isStaleByTime(options.staleTime);\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"names":["isServer","isValidTimeout","noop","replaceData","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","fetchState","QueryObserver","_client","WeakMap","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","_Class_brand","WeakSet","constructor","client","options","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","Set","_classPrivateFieldSet","bindMethods","setOptions","refetch","bind","onSubscribe","listeners","size","_classPrivateFieldGet","addObserver","shouldFetchOnMount","_assertClassBrand","_executeFetch","call","updateResult","_updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","_clearStaleTimeout","_clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","enabled","Error","_updateQuery","_defaulted","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","staleTime","_updateStaleTimeout","nextRefetchInterval","_computeRefetchInterval","_updateRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","state","getCurrentResult","trackResult","onPropTracked","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","trackProp","add","getCurrentQuery","arguments","length","undefined","fetch","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","cancelRefetch","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","newState","isPlaceholderData","data","_optimisticResults","fetchOnMount","fetchOptionally","fetchStatus","error","errorUpdatedAt","status","select","selectError","placeholderData","_classPrivateFieldGet2","Date","now","isFetching","isPending","isError","isLoading","hasData","isSuccess","isInitialLoading","dataUpdatedAt","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isStale","nextResult","defaultNotifyOptions","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","throwOnError","some","typedKey","changed","has","_notify","onQueryUpdate","promise","catch","time","timeout","setTimeout","_ref","refetchInterval","nextInterval","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","clearInterval","batch","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime","optimisticResult"],"sources":["C:\\Users\\joinu\\Documents\\GitHub\\Outfit-Generator-Frontend\\frontend\\node_modules\\@tanstack\\query-core\\src\\queryObserver.ts"],"sourcesContent":["import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { fetchState } from './query'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackProp(key as keyof QueryObserverResult)\n          onPropTracked?.(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.#currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.#currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Select data if needed\n    if (options.select && newState.data !== undefined) {\n      // Memoize select result\n      if (\n        prevResult &&\n        newState.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(newState.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = newState.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && placeholderData !== undefined) {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return options.enabled !== false && query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}